name: Course Management System CI/CD Pipeline

# Trigger on push to main/develop branches and pull requests
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Environment variables
env:
  NODE_VERSION: '18'
  MONGODB_URI: ${{ secrets.MONGODB_URI }}
  REDIS_HOST: ${{ secrets.REDIS_HOST }}
  ELASTICSEARCH_URL: ${{ secrets.ELASTICSEARCH_URL }}
  GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}

jobs:
  # Run tests and code quality checks
  test:
    name: Test and Code Quality
    runs-on: ubuntu-latest
    
    # Services for testing
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
      
      elasticsearch:
        image: elasticsearch:8.8.0
        ports:
          - 9200:9200
        env:
          discovery.type: single-node
          xpack.security.enabled: false
          ES_JAVA_OPTS: "-Xms512m -Xmx512m"

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install Dependencies
      run: |
        cd backend/services/auth && npm ci
        cd ../course-management && npm ci
        cd ../ai-recommendation && npm ci

    - name: Run Linting
      run: |
        cd backend/services/auth && npm run lint || true
        cd ../course-management && npm run lint || true
        cd ../ai-recommendation && npm run lint || true

    - name: Run Tests
      run: |
        cd backend/services/auth && npm test || true
        cd ../course-management && npm test || true
        cd ../ai-recommendation && npm test || true

    - name: Security Audit
      run: |
        cd backend/services/auth && npm audit --audit-level moderate || true
        cd ../course-management && npm audit --audit-level moderate || true
        cd ../ai-recommendation && npm audit --audit-level moderate || true

  # Build Docker images for deployment
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push Course Management Service
      uses: docker/build-push-action@v5
      with:
        context: ./backend/services/course-management
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/course-management-service:latest
          ${{ secrets.DOCKER_USERNAME }}/course-management-service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and Push Auth Service
      uses: docker/build-push-action@v5
      with:
        context: ./backend/services/auth
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/auth-service:latest
          ${{ secrets.DOCKER_USERNAME }}/auth-service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and Push AI Recommendation Service
      uses: docker/build-push-action@v5
      with:
        context: ./backend/services/ai-recommendation
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/ai-recommendation-service:latest
          ${{ secrets.DOCKER_USERNAME }}/ai-recommendation-service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to staging environment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: Deploy to Staging Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USERNAME }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          # Pull latest images
          docker pull ${{ secrets.DOCKER_USERNAME }}/course-management-service:latest
          docker pull ${{ secrets.DOCKER_USERNAME }}/auth-service:latest
          docker pull ${{ secrets.DOCKER_USERNAME }}/ai-recommendation-service:latest
          
          # Stop existing containers
          docker-compose -f docker-compose.staging.yml down
          
          # Start new containers
          docker-compose -f docker-compose.staging.yml up -d
          
          # Health check
          sleep 30
          curl -f http://localhost:3001/health || exit 1
          curl -f http://localhost:3002/health || exit 1
          curl -f http://localhost:3003/health || exit 1

  # Deploy to production environment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Deploy to Production Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USERNAME }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          # Pull latest images
          docker pull ${{ secrets.DOCKER_USERNAME }}/course-management-service:latest
          docker pull ${{ secrets.DOCKER_USERNAME }}/auth-service:latest
          docker pull ${{ secrets.DOCKER_USERNAME }}/ai-recommendation-service:latest
          
          # Blue-green deployment
          docker-compose -f docker-compose.prod.yml up -d --scale course-management-service=2
          
          # Health check
          sleep 30
          curl -f http://localhost:3001/health || exit 1
          curl -f http://localhost:3002/health || exit 1
          curl -f http://localhost:3003/health || exit 1
          
          # Update load balancer
          nginx -s reload

  # Send deployment notifications
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
